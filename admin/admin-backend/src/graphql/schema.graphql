type Admin {
  id: ID!
  username: String!
  password: String!
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
}


type AuthPayload {
  success: Boolean!
  message: String!
  user: Admin
  candidate:Candidate
  candidates: [Candidate!]
}



type Candidate {
  id: ID!
  name:String!
  active:Boolean!
  createdAt:String!
  user: User
}

type CandidateWithMeta {
  id: ID!
  firstName: String!
  email: String!
  role: String!
  availability: String!
}

type CandidateCourseInfo {
  courseName: String!
  role: String!
  availability: String!
  semester: String!
}

type CandidateWithCourses {
  id: ID!
  name: String!
  email: String!
  courses: [CandidateCourseInfo!]!
}

type UnselectedApplication {
  courseName: String!
  role: String!
  availability: String!
}

type UnselectedCandidate {
  id: ID!
  name: String!
  email: String!
  applications: [UnselectedApplication!]!
}

type Report {
  courseName: String!
  candidates: [CandidateWithMeta!]!
}

type Query {
  admins: [Admin]
  candidatesByCourse: [Report!]!
  candidatesWithMoreThan3Courses: [CandidateWithCourses!]!
  unselectedCandidates: [UnselectedCandidate!]!
  allCandidates:AuthPayload
  getCourse(id: ID!): CoursePayload
  getAllCourses: CoursePayload
  getCoursesBySemester(semester: Int!):CoursePayload
}

type Mutation {
  login(username: String!, password: String!): AuthPayload
  updateCandidateActive(id: ID!, active: Boolean!): AuthPayload
  # course
  createCourse(input: CourseInput!): CoursePayload
  updateCourse(id: ID!, name: String! ,code: String!): CoursePayload
  deleteCourse(id: ID!): CoursePayload
}


type Course {
  id: ID!
  code: String!
  name: String!
  semester: Int!
  createdAt: String!
  updatedAt: String!
}

type CoursePayload {
  success: Boolean!
  message: String!
  course: Course
  courses: [Course!]
}

input CourseInput {
  code: String!
  name: String!
}

input UpdateCourseInput {
  code: String
  name: String
  semester: Int
}