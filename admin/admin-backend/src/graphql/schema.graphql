type Admin {
  id: ID!
  username: String!
  password: String!
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
}


type AuthPayload {
  success: Boolean!
  message: String!
  user: Admin
  candidate:Candidate
  candidates: [Candidate!]
}



type Candidate {
  id: ID!
  name:String!
  active:Boolean!
  createdAt:String!
  user: User
}

type CandidateWithMeta {
  id: ID!
  firstName: String!
  email: String!
  role: String!
  availability: String!
}

type CandidateCourseInfo {
  courseName: String!
  role: String!
  availability: String!
}

type CandidateWithCourses {
  id: ID!
  name: String!
  email: String!
  courses: [CandidateCourseInfo!]!
}

type Report {
  courseName: String!
  candidates: [CandidateWithMeta!]!
}

type Query {
  admins: [Admin]
  candidatesByCourse: [Report!]!
  candidatesWithMoreThan3Courses: [CandidateWithCourses!]!
  unselectedCandidates: [User!]!
  allCandidates:AuthPayload
}

type Mutation {
  login(username: String!, password: String!): AuthPayload
  updateCandidateActive(id: ID!, active: Boolean!): AuthPayload
}
